#!/usr/bin/env python2

import roslib
import rospy
import sys
import cv2
from sensor_msgs.msg import Image, CameraInfo
from cv_bridge import CvBridge, CvBridgeError
from mavros_msgs.srv import *
from mavros_msgs import RCIn
import numpy as np
import time 

class cvBridgeDemo():
    def __init__(self):
        self.node_name = "cv_bridge_demo"
        
        rospy.init_node(self.node_name)
        
        # What we do during shutdown
        rospy.on_shutdown(self.cleanup)
                
        # Create the cv_bridge object
        self.bridge = CvBridge()

        self.x_percent = 0.30
        self.y_percent = 0
        self.mode = "LOITER"
        self.dist = 0.5
        
        # Subscribe to the camera image and depth topics and set
        # the appropriate callbacks
        self.depth_sub = rospy.Subscriber("/d400/depth/image_rect_raw", Image, self.depth_callback)

        self.rc_sub = rospy.Subscriber("/mavros/rc/in", RCIn, self.rc_callback)
        self.rc_mode = "sensing"
        
        rospy.loginfo("Waiting for image topics...")

    def rc_callback(self, msg):
        print(msg)
               
    def depth_callback(self, ros_image):
        # The depth image is a single-channel float32 image
        depth_image = self.bridge.imgmsg_to_cv2(ros_image)

        start = time.time()
        np_image = np.array(depth_image)
        

        
        min_x = int(np_image.shape[0]*self.x_percent)
        max_x = int(np_image.shape[0]*(1-self.x_percent))
        min_y = int(np_image.shape[1]*self.y_percent)
        max_y = int(np_image.shape[1]*(1-self.y_percent))
        
        #print(min_x, max_x, min_y, max_y)
        
        np_region = np_image[min_y:max_y, min_x:max_x]
        #print(np_region.shape)
        distance = np.min(np_region[np_region > 170])/1000.0
        print("time: " + str(time.time() - start) + "distance: " + str(distance) + " m, mode: " + self.mode)

        
        rospy.wait_for_service('/mavros/set_mode')
        if distance < self.dist and self.mode == "LOITER":
            try:
                flightModeService = rospy.ServiceProxy('/mavros/set_mode', mavros_msgs.srv.SetMode)
                isModeChanged = flightModeService(custom_mode='BRAKE') #return true or false
                if isModeChanged:
                    print("set brake")
                    self.mode = "BRAKE"
            except rospy.ServiceException, e:
                print "service set_mode call failed: %s. GUIDED Mode could not be set. Check that GPS is enabled"%e
        elif distance >= self.dist and self.mode == "BRAKE":
            try:
                flightModeService = rospy.ServiceProxy('/mavros/set_mode', mavros_msgs.srv.SetMode)
                isModeChanged = flightModeService(custom_mode='LOITER') #return true or false
                if isModeChanged:
                    print("set loiter")
                    self.mode = "LOITER"
            except rospy.ServiceException, e:
                print "service set_mode call failed: %s. GUIDED Mode could not be set. Check that GPS is enabled"%e
        
        # Display the result
        #cv2.imshow("Depth Image", np_region)
        #cv2.waitKey(1)
    
    def cleanup(self):
        print "Shutting down vision node."
        cv2.destroyAllWindows()   
    
def main(args):       
    try:
        cvBridgeDemo()
        rospy.spin()
    except KeyboardInterrupt:
        print "Shutting down vision node."
        cv2.DestroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)
    