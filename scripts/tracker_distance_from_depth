#!/usr/bin/env python2

""" cv_bridge_demo.py - Version 0.1 2011-05-29

    A ROS-to-OpenCV node that uses cv_bridge to map a ROS image topic and optionally a ROS
    depth image topic to the equivalent OpenCV image stream(s).
    
    Created for the Pi Robot Project: http://www.pirobot.org
    Copyright (c) 2011 Patrick Goebel.  All rights reserved.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details at:
    
    http://www.gnu.org/licenses/gpl.html
      
"""

import roslib
import rospy
import sys
import cv2
from sensor_msgs.msg import Image, CameraInfo
from cv_bridge import CvBridge, CvBridgeError
import numpy as np

class cvBridgeDemo():
    def __init__(self):
        self.node_name = "cv_bridge_demo"
        
        rospy.init_node(self.node_name)
        
        # What we do during shutdown
        rospy.on_shutdown(self.cleanup)
                
        # Create the cv_bridge object
        self.bridge = CvBridge()
        
        # Subscribe to the camera image and depth topics and set
        # the appropriate callbacks
        self.depth_sub = rospy.Subscriber("/camera/depth/image_rect_raw", Image, self.depth_callback)
        
        rospy.loginfo("Waiting for image topics...")

               
    def depth_callback(self, ros_image):
        # The depth image is a single-channel float32 image
        depth_image = self.bridge.imgmsg_to_cv2(ros_image)
        np_image = np.array(depth_image)
        x_percent = 0.30
        y_percent = 0.30
        min_x = int(np_image.shape[0]*x_percent)
        max_x = int(np_image.shape[0]*(1-x_percent))
        min_y = int(np_image.shape[1]*y_percent)
        max_y = int(np_image.shape[1]*(1-y_percent))
        
        #print(min_x, max_x, min_y, max_y)
        
        np_region = np_image[min_x:max_x, min_y:max_y]
        #print(np_region.shape)
        print("distance: " + str(np.min(np_region[np_region > 0])/1000.0) + " m")
        
        
        # Display the result
        #cv2.imshow("Depth Image", depth_image)
        #cv2.waitKey(1)
    
    def cleanup(self):
        print "Shutting down vision node."
        cv2.destroyAllWindows()   
    
def main(args):       
    try:
        cvBridgeDemo()
        rospy.spin()
    except KeyboardInterrupt:
        print "Shutting down vision node."
        cv2.DestroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)
    